#!/usr/bin/env python3

# requires python3-tk, python3-numpy

import re
import numpy as np
import math
import argparse
from subprocess import run, PIPE

from tkinter import Tk, Canvas, messagebox, simpledialog, Frame, Label, Button, IntVar, Entry, END, Listbox

class GUI(object):
    '''
    Only implement Tk GUI for the moment.

    Handles all UI related actions for a calibrator, will be
    instanciated from there.

    This will take over user communication and main loop,
    as soon as the calibrator has been set up and passes
    new information to the calibrator as soon as it is available.
    '''
    def __init__(self, calibrator, new_cal=None):
        self.index = -1
        self.calibrator = calibrator
        self.root = Tk()
        self.calibrator_click = None
        self.canvas = Canvas(self.root)
        self.frame = Frame(self.canvas)#, height=self.Y//2, width=self.X//2 )
        self.X = 640
        self.Y = 480
        self.window = self.canvas.create_window((self.X//2, self.Y//2), window=self.frame)
        self.canvas.pack(expand=True, fill='both')
        self.canvas.bind('<Configure>', self.resize)
        self.canvas_widgets = []

    def clear_frame(self):
        for widget in self.frame.winfo_children():
            widget.destroy()

    def clear_screen(self):
        self.legend_y = 0
        for w in self.canvas_widgets:
            self.canvas.delete(w)
        self.canvas_widgets = []

    def ask_yesno(self, text, yes, no):
        label = Label(self.frame, text=text)

        def done_yes():
            self.clear_frame()
            yes()
        def done_no():
            self.clear_frame()
            no()

        btn_yes = Button(self.frame, text="Yes", command=done_yes)
        btn_no = Button(self.frame, text="No", command=done_no)
        label.grid(row=0, column=1)
        btn_no.grid(row=1, column=0)
        btn_yes.grid(row=1, column=2)

    def ask_int(self, text, default=None, when_done=None):
        #return simpledialog.askinteger("", text)#, default=default)
        label = Label(self.frame, text=text)
        v = IntVar()
        v.set(default)
        entry = Entry(self.frame, textvariable=v)

        def done():
            self.clear_frame()
            when_done(v)

        btn_on = Button(self.frame, text="OK", command=done)
        label.grid(row=0, column=0)
        entry.grid(row=0, column=1)
        btn_on.grid(row=0, column=2)

    def ask_list(self, text, items, default=None, when_done=None):
        #return simpledialog.askinteger("", text)#, default=default)
        label = Label(self.frame, text=text)
        lb = Listbox(self.frame)
        for item in items:
            lb.insert(END, item)

        def done():
            selection = lb.curselection()
            if not selection:
                return
            self.clear_frame()
            # Assume there is only one selection at a time
            when_done(items[selection[0]])

        if default is None:
            lb.selection_set(0)
        else:
            lb.selection_set(default)

        btn_ok = Button(self.frame, text="OK", command=done)
        label.grid(row=0, column=0)
        lb.grid(row=1, column=0)
        btn_ok.grid(row=2, column=0)

    def show_info(self, text, done):
        messagebox.showinfo(text)
        done()

    def run(self):
        self.root.mainloop()

    def show_workarea(self, when_done):
        self.sensitive = False
        self.legend_y = None

        # TODO: Do better ;)
        self.root.bind('<Escape>', self.cancel_cal)
        self.canvas.bind('<Escape>', self.cancel_cal)
        self.canvas.bind('<Button-1>', self.click)
        # TODO Move when_done into resize callback, before
        #      release
        #self.root.attributes('-fullscreen', True)
        self.draw_legends()
        when_done()

    def after(self, seconds, func):
        self.root.after(int(seconds*1000.), func)

    def resize(self, event):
        self.X, self.Y = event.width, event.height
        self.clear_screen()

    def legend(self, text, colour='#000'):
        w = self.canvas.create_text(self.X/2, self.legend_y, text=text, fill=colour)
        self.canvas_widgets.append(w)
        self.legend_y += 12

    def draw_legends(self):
        self.legend_y = self.Y * 0.3
        self.legend('Esc to cancel.')
        self.legend('Raw self.point in black')
        self.legend('Old cal self.point in blue', '#00F')
        self.legend('Target self.point in red', '#F00')
        #if self.new_cal is not None:
        #    self.legend('New cal self.point in green', '#0F0')

    def next_point(self, sx, sy, click_handler=None):
        if click_handler is not None:
            self.calibrator_click = click_handler

        self.draw_target(sx, sy)

    def cross(self, px, py, colour):
        x, y = px*self.X, py*self.Y
        self.canvas.create_line(x-10, y, x+10, y, fill=colour)
        self.canvas.create_line(x, y-10, x, y+10, fill=colour)

    def draw_target(self, px, py):
        x, y = px*self.X, py*self.Y
        self.canvas.create_oval(x-10, y-10, x+10, y+10, outline='#F00', width=3)
        self.cross(px, py, '#F00')

    def cancel_cal(self, _):
        print('Calibration cancelled')
        self.points.clear()
        self.root.destroy()

    def indicator(self, sx, sy, px, py, colour):
        self.canvas.create_line(self.X*sx, self.Y*sy, self.X*px, self.Y*py, fill=colour)
        self.cross(px, py, colour)

    def click(self, event):
        if not self.sensitive:
            return
        self.sensitive = False

        ex, ey = event.x, event.y
        self.calibrator_click(ex, ey)

    def quit(self):
        self.root.destroy()

class xcal_base(object):
    def get_devs(self):
        '''
        Placeholder for actual code
        '''
        pass

    def print_devs(self, devs):
        '''
        Placeholder for actual code
        '''
        pass

    def choose_preferred(self, devs):
        '''
        Placeholder for actual code
        '''
        pass

    def read_cal(self, dev):
        '''
        Placeholder for actual code
        '''
        pass


    def ask(self, q):
        '''
        Placeholder for actual code
        '''
        pass

    def use_cal(dev, new_cal):
        '''
        Placeholder for actual code
        '''
        pass

    def transform(self, x, y, cal):
        # TBD: Make cal selectable by flags, maybe makes more sense?
        p = np.matrix([[x], [y], [1]])
        out = np.matmul(cal, p)
        return out.item(0), out.item(1)

    def fit(self, screen_pts, mouse_pts):
        from math import log10
        m_screen = np.matrix([[*p, 1] for p in screen_pts])
        m_mouse = np.matrix([[*p, 1] for p in mouse_pts])
        m_transform, residuals, rank, singular = np.linalg.lstsq(m_mouse, m_screen)
        quality = -log10(residuals.sum())
        return m_transform, quality


    def calibrate(self, points, disable_rot):
        if disable_rot:
            '''
            [mx 1] [a 0]   [sx 1]
            [mx 1] [e 1] = [sx 1]
            [... ]         [... ]

            [my 1] [d 0]   [sy 1]
            [my 1] [f 1] = [sy 1]
            [... ]         [... ]
            '''
            tx, qual_x = self.fit(screen_pts=((p['sx'],) for p in self.points),
                                  mouse_pts=((p['mx'],) for p in self.points))
            ty, qual_y = self.fit(screen_pts=((p['sy'],) for p in self.points),
                                  mouse_pts=((p['my'],) for p in self.points))
            m_transform = np.matrix([
                [tx[0, 0], 0,        0],
                [0,        ty[0, 0], 0],
                [tx[1, 0], ty[1, 0], 1]])
            quality = min(qual_x, qual_y)
        else:
            '''
            m_mouse * m_transform = m_screen
            [mx my 1] [a b 0]   [sx sy 1]
            [mx my 1] [c d 0] = [sx sy 1]
            [...    ] [e f 1]   [...    ]
            '''
            m_transform, quality = self.fit(screen_pts=[(p['sx'], p['sy']) for p in self.points],
                                       mouse_pts=[(p['mx'], p['my']) for p in self.points])
            m_transform[:, 2] = ([0], [0], [1])

        m_transform = m_transform.getT()
        return m_transform, quality


    def state_choose_dev(self):
        self.state = self.state_choose_dev
        preferred_id = self.choose_preferred(self.devs)
        # Command line can bypass this dialog
        if self.args and self.args.device:
            self.dev = self.args.device
            if self.read_cal(self.dev) is None:
                print("Device {} does not support calibration".format(self.dev))
                self.ui.quit()
                return
            self.state_choose_points()
            return

        def chosen(devname):
            print(devname)
            dev = int(devname.split('-')[0])
            if dev in self.devs.keys():
                self.dev = dev
                self.state_choose_points()
                return
            else:
                self.state_choose_dev()
        dev_list = []
        preferred = 0
        for i, name in sorted(self.devs.items()):
            if i == preferred_id:
                preferred = len(dev_list)
            dev_list.append('%3d-%36s' % (i, name))
        self.ui.ask_list('Device to calibrate:', dev_list, preferred, chosen)

    def state_choose_points(self):
        p_min, default = 3, 4
        self.state = self.state_choose_points
        # Command line can bypass this dialog
        if self.args and self.args.num_points:
            self.n_points = self.args.num_points
            self.state_init()
            return

        def chosen(var):
            p = var.get()
            if p > p_min:
                self.n_points = p
                self.state_init()
            else:
                self.state()

        p_str = self.ui.ask_int('Point count (min %d): ' % p_min, default, when_done=chosen)

    def state_init(self):
        self.state = self.state_init

        self.old_cal, self.old_cal_inv = self.read_cal(self.dev)

        self.n_cols = int(math.ceil(math.sqrt(self.n_points)))
        self.n_rows = int(math.ceil(self.n_points / self.n_cols))

        self.X, self.Y = None, None
        self.point = {}
        self.points = []
        
        for i in range(self.n_points):
            x = 0.1 + 0.8*(i  % self.n_cols)/(self.n_cols - 1)
            y = 0.1 + 0.8*(i // self.n_cols)/(self.n_rows - 1)
            self.points.append({'sx': x, 'sy': y})

        self.index = 0

        new_cal = None
        if 'calibrate_ask' in self.todo:
            self.ui.ask_yesno('Calibrate?', yes=self.state_cal_init, no=self.state_test)
        elif 'calibrate_yes' in self.todo:
            self.state_cal_init()
        else:
            self.state_test()

    def got_click(self, ex, ey):
        sx, sy = self.point['sx'], self.point['sy']
        ox, oy = ex/self.ui.X, ey/self.ui.Y  # old-calibrated
        self.ui.indicator(sx, sy, ox, oy, '#00F')

        ux, uy = self.transform(ox, oy, self.old_cal_inv)  # uncalibrated
        self.ui.indicator(sx, sy, ux, uy, '#000')

        if self.new_cal is not None:
            nx, ny = self.transform(ux, uy, self.calibrator.new_cal)  # new-calibrated (test only)
            self.ui.indicator(sx, sy, nx, ny, '#0F0')

        self.point.update({'mx': ux, 'my': uy})
        self.points[self.index].update(self.point)
        self.index += 1

        # Wake up state machine in 500ms
        self.ui.after(0.5, self.state)

    def state_cal_init(self):
        self.index = 0
        self.ui.show_workarea(self.state_cal)

    def state_cal(self):
        self.state = self.state_cal
        print("In state_cal: {}".format(self.index))
        #if self.disable_rot is None:
        #    self.disable_rot = self.ui.ask_yesno('Disable rotation?')
        # TODO please do better here!
        disable_rot = False
        if self.index >= self.n_points:
            self.state_done_cal()

        self.ui.sensitive = True
        self.point = self.points[self.index]

        self.ui.next_point(self.point['sx'], self.point['sy'], self.got_click)

    def state_done_cal(self):
        self.state = self.state_done_cal
        self.ui.sensitive = False

        self.new_cal, quality = self.calibrate(self.points, self.disable_rot)

        if self.args and self.args.apply:
            self.state_test()
            return

        message = 'New calibration:'
        message += "\n"+str(self.new_cal)
        message += '\nQuality (should be at least 3): %.1f' % quality
        message += "\n\nUse calibration?"
        self.ui.ask_yesno(message, yes=self.state_use_cal, no=self.state_test)

    def state_use_cal(self):
        self.use_cal()
        self.state_test()

    def state_test(self):
        self.state = self.state_test
        self.ui.ask_yesno("Test calibration?", yes=self.state_test_start, no=self.state_quit)
        # TODO show points again

    def state_test_start(self):
        self.state_quit()

    def state_quit(self):
        if args and self.args.save:
            np.savetxt(self.args.save, self.new_cal)
        self.ui.quit()

    def run(self):
        self.X, self.Y = None, None
        self.point, self.points = {}, []
        self.index = -1
        self.ui.after(0.5, self.state)
        # Pass control to UI
        self.ui.run()

    def __init__(self, ui, args=None):
        '''
        Create a new calibrator instance.

        Takes the UI base class and instanciates it. Optionally some 
        preferences may be passes by command line arguments therefore,
        these can be passed, too.
        '''
        self.ui = ui(self)
        self.devs = self.get_devs()
        self.new_cal = None
        self.disable_rot = True
        self.args = args
        self.todo = []
        if args:
            if args.load:
                self.todo.append('load_yes')
            if args.calibrate:
                self.todo.append('calibrate_yes')
            if args.test:
                self.todo.append('test_yes')
            if args.apply:
                self.todo.append('apply_yes')
            if args.save:
                self.todo.append('save_yes')
                
        if set(['calibrate_ask', 'calibrate_yes', 'test_ask', 'test_yes']).isdisjoint(set(self.todo)):
            self.todo = ['calibrate_ask', 'test_ask']
        print(self.todo)
        self.state = self.state_choose_dev

class xcal_xinput(xcal_base):
    prop_name = 'libinput Calibration Matrix'

    def xinput(self, *args):
        return run(args=('/usr/bin/xinput', *args),
                   stdout=PIPE, check=True,
                   universal_newlines=True).stdout


    def read_cal(self, dev):
        '''
        Get a devices current calibration matrix from xinput command line tool.

        The device will be identified by its numeric id, passed in "dev".

        May return None if calibration parameters are not supported by device.

        Otherwise it will return its calibration matrix and its inverse.
        '''
        stdout = self.xinput('--list-props', str(dev))
        line = re.search(self.prop_name + r'.*:\s+(\S.+)', stdout)
        if not line:
            return None
        vals = np.matrix(line.group(1)).reshape(3, 3)

        return vals, np.linalg.inv(vals)

    def get_devs(self):
        devs = {int(groups[1]): groups[0] for groups in
                re.findall(r'↳ (\w.+\w)\s+id=(\d+)\D+slave *pointer',
                           self.xinput('--list', '--short'))}
        # Now filter out devs that do NOT support our calibration
        devs = { dev: devs[dev] for dev in devs if self.read_cal(dev) is not None }
        if not devs:
            print('No suitable input devices found')
            exit(1)
        return devs


    def print_devs(self, devs):
        msg = "\n".join(('Pointer devices:',
                        '%4s %35s' % ('ID', 'Name')))

        for i, name in sorted(devs.items()):
            msg+=('\n%4d %35s' % (i, name))
        self.ui.show_info(msg)

    def choose_preferred(self, devs):
        preferred = [i for (i, n) in devs.items() if 'touch' in n.lower()]
        if preferred:
            return preferred[0]
        return next(iter(devs.keys()))

    def use_cal(self):
        cal_array = [str(x)+',' for x in self.new_cal.flatten().tolist()[0]]
        self.xinput('--set-prop', str(self.dev), self.prop_name, *cal_array)

parser = argparse.ArgumentParser(description='Calibrate an xinput device')
parser.add_argument('-d', '--device', type=int, action='store',
                    help='Device number according to xinput')
parser.add_argument('-n', '--num-points', type=int, action='store', default=None,
                    choices=range(3,9), help='Number of calibration points')
parser.add_argument('-s', '--save', type=argparse.FileType('w'),
                    default=None, help='File name to store calibration')
parser.add_argument('-l', '--load', type=argparse.FileType('r'),
                    default=None, help='File name to load calibration from')
parser.add_argument('-t', '--test', action='store_true',
                    help='Test settings')
parser.add_argument('-a', '--apply', action='store_true',
                    help='Apply loaded/generated calibration automatically')
parser.add_argument('-c', '--calibrate', action='store_true',
                    default=None, help='Run calibration')

args = parser.parse_args()
print(args)
cal=xcal_xinput(GUI, args=args)
cal.run()
#main()
